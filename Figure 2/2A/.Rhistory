library("edgeR")
edgeRUsersGuide()
library("limma")
library("edgeR")
library(reshape2)
library(cowplot)
library(plyr)

Sys.setenv(LANGUAGE = "en") #显示英文报错信息
options(stringsAsFactors = FALSE) #禁止chr转成factor
Immun=read.table("STAD-CIBERSORT-Results.txt",sep="\t",header=T,check.names=F)           #读取文件
Immun=as.matrix(Immun)
View(Immun)
Immun$CD8	T cells
CD8$Expr <- as.numeric(Immun$T cells CD8)

tcga_expr=read.table("STAD_mRNAmatrix.raw.txt",sep="\t",header=T,row.names = 1,check.names=F)           #读取文件
tcga_expr[1:3,1:3]
Immun=read.table("STAD-CIBERSORT-Results.txt",sep="\t",header=T,row.names = 1,check.names=F)           #读取文件
Immun=as.matrix(Immun)
symbol <- "CD274"
topnumber = 6 #取正相关排名Top 6和负相关排名Top 6的基因
# plot with special pointnumber by groupping gene expression levels into equally sized bins
pointnumber = 20
######计算相关系数################
# 目标基因
target.exps <- tcga_expr[symbol,]
# 其余基因
other.expr <- tcga_expr[-which(rownames(tcga_expr)==symbol),]
# spearman
sgcor_spearman <- as.data.frame(cor(t(other.expr), t(target.exps), method = "spearman"))
colnames(sgcor_spearman) <- "r_spearman"
sgcor_spearman$pval_spearman <- apply(other.expr, 1, function(x)(cor.test(x, t(target.exps), method = "spearman")$p.value))
# 把相关系数、pvalue都写进cors里
cors <- cbind(sgcor, sgcor_spearman)
cors$gene <- rownames(other.expr)
head(cors)
######计算相关系数################
# 目标基因
target.exps <- tcga_expr[symbol,]
# 其余基因
other.expr <- tcga_expr[-which(rownames(tcga_expr)==symbol),]
# spearman
sgcor_spearman <- as.data.frame(cor(t(other.expr), t(target.exps), method = "spearman"))
target.exps
other.expr
# spearman
sgcor_spearman <- as.data.frame(cor(t(other.expr), t(target.exps), method = "spearman"))
View(sgcor_spearman)
colnames(sgcor_spearman) <- "r_spearman"
sgcor_spearman$pval_spearman <- apply(other.expr, 1, function(x)(cor.test(x, t(target.exps), method = "spearman")$p.value))
# 把相关系数、pvalue都写进cors里
cors <- cbind(sgcor, sgcor_spearman)
View(sgcor_spearman)
# pearson
sgcor <- as.data.frame(cor(t(other.expr), t(target.exps))) #默认pearson
colnames(sgcor) <- "r_pearson"
# 计算pvalue，运行时间较长
sgcor$pval_pearson <- apply(other.expr, 1, function(x) (cor.test(x, t(target.exps))$p.value))
# 把相关系数、pvalue都写进cors里
cors <- cbind(sgcor, sgcor_spearman)
cors$gene <- rownames(other.expr)
head(cors)
topnumber = 10 #取正相关排名Top 6和负相关排名Top 6的基因
# 取相关系数排名前几位的基因，在参数设置里修改topnumber
# 此处取前6和后6，也就是正相关Top6和负相关Top6
newcor <- cors[!(is.na(cors$r_pearson)),]
dim(newcor)
sortcor <- newcor[order(newcor$r_pearson, newcor$r_spearman, decreasing = T),]
topcor <- sortcor[c(1:topnumber, #正相关Top 6
(nrow(sortcor) - topnumber + 1):nrow(sortcor)),] #负相关Top 6
rownames(topcor)
# 提取相关系数排名前几位基因的表达矩阵
genes <- c(symbol,rownames(topcor))
genesexps <- as.data.frame(t(tcga_expr[genes,]))
sortgenesexps <- genesexps[order(genesexps[,1]),]
samplenum <- nrow(sortgenesexps)
if(is.null(pointnumber)){
pointnumber=samplenum
}
# plot with special pointnumber by groupping gene expression levels into equally sized bins
group <- as.integer(cut(1:samplenum, breaks=c(seq(from=0.5, to=samplenum, by=samplenum/pointnumber), samplenum+0.5)))
ddf <- data.frame(row.names = 1:pointnumber)
for( i in 1:(1 + topnumber*2)){
ddf <- cbind(ddf,tapply(sortgenesexps[,i],group,median))
}
colnames(ddf) <- c(symbol,topcor$gene)
mddf <- melt(ddf,id.vars=symbol)
# 在图中显示pearson的r和P
# 或者显示spearman的r和P，就换成r_spearman和pval_spearman
mddf$r <- topcor[mddf$variable,]$r_pearson
mddf$P <- topcor[mddf$variable,]$pval_pearson
plist <- dlply(mddf, .(variable), function(trig){ggplot(trig, aes_string(x=symbol, y="value")) +
geom_point() +
ylab(unique(trig$variable)) +
ggtitle(paste0("r = ", round(unique(trig$r),2),
"\nP = ", sprintf("%1.1e", unique(trig$P)))) +
geom_smooth(method = "lm", se=F, colour = "#206BB5")})
pg <- plot_grid(plotlist = plist, ncol=3, align = "hv")
pg
filename <- paste0(symbol, "PD-L1_cor.pdf")
ggsave(filename, width = 8, height = 10)
filename <- paste0(symbol, "PD-L1_cor.pdf")
ggsave(filename, width = 8, height = 30)
ggsave(filename, width = 8, height = 20)
ggsave(filename, width = 8, height = 20)
##########################################################
plist <- dlply(mddf, .(variable), function(trig){ggplot(trig, aes_string(x="PD-L1", y="value")) +
geom_point() +
ylab(unique(trig$variable)) +
ggtitle(paste0("r = ", round(unique(trig$r),2),
"\nP = ", sprintf("%1.1e", unique(trig$P)))) +
geom_smooth(method = "lm", se=F, colour = "#206BB5")})
pg <- plot_grid(plotlist = plist, ncol=3, align = "hv")
pg
write.csv( cors,' corroutput.csv', row.names = T)
filename <- paste0(symbol, "PD-L1_cor.pdf")
ggsave(filename, width = 8, height = 20)
plist <- dlply(mddf, .(variable), function(trig){ggplot(trig, aes_string(x=symbol, y="value")) +
geom_point() +
theme_bw()+
labs(x="PD-L1")
ylab(unique(trig$variable)) +
ggtitle(paste0("r = ", round(unique(trig$r),2),
"\nP = ", sprintf("%1.1e", unique(trig$P)))) +
geom_smooth(method = "lm", se=F, colour = "#206BB5")})
pg <- plot_grid(plotlist = plist, ncol=3, align = "hv")
pg
View(target.exps)
View(tcga_expr)
View(target.exps)
write.csv(target.exps,"PD-L1.csv", row.names = T)
filename <- paste0(symbol, "PD-L1_cor.pdf")
ggsave(filename, width = 8, height = 20)
filename <- paste0(symbol, "PD-L1_cor.pdf")
ggsave(filename, width = 8, height = 20)
View(mddf)
pg <- plot_grid(plotlist = plist, ncol=5, align = "hv")
pg
filename <- paste0(symbol, "_cor.pdf")
ggsave(filename, width = 15, height = 20)
library(GetoptLong)
library(corrplot)
#--------------------------------------------------------------------------------

tcga_expr=read.table("STAD-CIBERSORT-Results.txt",sep="\t",header=T,row.names = 1,check.names=F)           #读取文件
tcga_expr[1:3,1:3]
#--------------------------------------------------------------------------------
cmethod="pearson"
pmethod="pearson"
palternative="two.sided"
txtcol="red"
conf=0.95
sig=0.05
dir="."
name="corrplot"
GetoptLong(
"infile=s","the input file",
"cmethod=s","the method to Computed correlation coefficient default pearson options=[pearson, kendall, spearman]",
"pmethod=s","the method to Computed pvalue correlation default pearson options=[pearson, kendall, spearman]",
"palternative=s","the method to evaluate pvalue default=two.sided options=[two.sided,less,greater] ",
"txtcol=s","the color of lable name default=red",
"sig=f","the level of significance default=0.05",
"conf=f","the confident degree while Computing the p-value default=0.95",
"dir=s","the director of output default= ./",
"name=s","the name of picture default=QCplot"
)
file<-read.table("STAD-CIBERSORT-Results.txt",header=TRUE,row.names=1,sep="\t",check.name=F)
M <- cor(file,method=cmethod)
col1 <- colorRampPalette(c("#7F0000", "red", "#FF7F00", "yellow", "white",
"cyan", "#007FFF", "blue","#00007F"))
col2 <- colorRampPalette(c("#67001F", "#B2182B", "#D6604D", "#F4A582",
"#FDDBC7", "#FFFFFF", "#D1E5F0", "#92C5DE",
"#4393C3", "#2166AC", "#053061"))
col3 <- colorRampPalette(c("red", "white", "blue"))
col4 <- colorRampPalette(c("#7F0000", "red", "#FF7F00", "yellow", "#7FFF7F",
"cyan", "#007FFF", "blue", "#00007F"))
wb <- c("white", "black")
res1 <- cor.mtest(file, conf.level = conf, method=pmethod)
picturename=paste(dir,"/",name,".pdf",sep="")
picturename2=paste(dir,"/",name,".png",sep="")
pdf(picturename)
corrplot(M,tl.col=txtcol ,type = "upper", method = "square", order = "AOE",p.mat=res1$p,sig.level=sig,col = rev(col2(200)))
dev.off()
convertpic=paste("convert -density 300 ",picturename,picturename2)
system(convertpic)
txtcol="black"
file<-read.table("STAD-CIBERSORT-Results.txt",header=TRUE,row.names=1,sep="\t",check.name=F)
M <- cor(file,method=cmethod)
col1 <- colorRampPalette(c("#7F0000", "red", "#FF7F00", "yellow", "white",
"cyan", "#007FFF", "blue","#00007F"))
col2 <- colorRampPalette(c("#67001F", "#B2182B", "#D6604D", "#F4A582",
"#FDDBC7", "#FFFFFF", "#D1E5F0", "#92C5DE",
"#4393C3", "#2166AC", "#053061"))
col3 <- colorRampPalette(c("red", "white", "blue"))
col4 <- colorRampPalette(c("#7F0000", "red", "#FF7F00", "yellow", "#7FFF7F",
"cyan", "#007FFF", "blue", "#00007F"))
wb <- c("white", "black")
res1 <- cor.mtest(file, conf.level = conf, method=pmethod)
picturename=paste(dir,"/",name,".pdf",sep="")
picturename2=paste(dir,"/",name,".png",sep="")
pdf(picturename)
corrplot(M,tl.col=txtcol ,type = "upper", method = "square", order = "AOE",p.mat=res1$p,sig.level=sig,col = rev(col2(200)))
dev.off()
convertpic=paste("convert -density 300 ",picturename,picturename2)
system(convertpic)
pdf(picturename,width = 16,height = 9)
corrplot(M,tl.col=txtcol ,type = "upper", method = "square", order = "AOE",p.mat=res1$p,sig.level=sig,col = rev(col2(200)))
dev.off()
convertpic=paste("convert -density 300 ",picturename,picturename2)
system(convertpic)
View(M)
write.csv( M,' corroutput.csv', row.names = T)
write.csv( cors,' gene corroutput.csv', row.names = T)
